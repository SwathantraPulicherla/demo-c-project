name: AI Test Execution

on:
  issues:
    types: [opened, labeled, edited]
  workflow_dispatch:  # Manual trigger for testing

# Allow GitHub Pages deployment
permissions:
  contents: write  # Added write permission for committing reports
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  run-tests:
    if: contains(github.event.issue.labels.*.name, 'ai-test-run') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      coverage_available: ${{ steps.test-summary.outputs.coverage_available }}

    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        path: target-repo

    - name: Checkout AI tools
      uses: actions/checkout@v4
      with:
        repository: SwathantraPulicherla/ai-test-runner
        path: ai-tools
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout AI test generator
      uses: actions/checkout@v4
      with:
        repository: SwathantraPulicherla/ai-c-test-generator
        path: ai-test-generator
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Upgrade pip and setuptools
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential lcov

    - name: Install AI test runner
      run: |
        cd ai-tools
        pip install -e .
        # Set PYTHONPATH to include ai-test-generator for imports
        echo "PYTHONPATH=$GITHUB_WORKSPACE/ai-test-generator:$PYTHONPATH" >> $GITHUB_ENV

    - name: Run AI tests
      id: test-execution
      run: |
        cd target-repo
        # Clean build directory to avoid CMake cache conflicts
        rm -rf build/
        echo "Running ai-test-runner with verbose output..."
        ai-test-runner --verbose 2>&1

    - name: Generate test summary
      id: test-summary
      run: |
        cd target-repo
        echo "=== DEBUGGING INFO ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Tests directory:"
        ls -la tests/ 2>/dev/null || echo "tests/ directory not found"
        echo "Coverage reports directory:"
        ls -la tests/coverage_reports/ 2>/dev/null || echo "tests/coverage_reports/ directory not found"
        echo "Test reports directory:"
        ls -la tests/test_reports/ 2>/dev/null || echo "tests/test_reports/ directory not found"
        echo "=== END DEBUGGING ==="
        
        # Extract test results from the output
        if [ -d "tests/test_reports" ]; then
          TEST_SUMMARY=$(find tests/test_reports -name "*.txt" -exec cat {} \; | grep -E "(PASSED|FAILED|Individual Tests)" | tail -10)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$TEST_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "summary=No test reports found" >> $GITHUB_OUTPUT
        fi
        
        # Check for coverage report
        if [ -d "tests/coverage_reports" ]; then
          echo "coverage_available=true" >> $GITHUB_OUTPUT
          echo "Coverage reports found - setting coverage_available=true"
        else
          echo "coverage_available=false" >> $GITHUB_OUTPUT
          echo "Coverage reports NOT found - setting coverage_available=false"
        fi

    - name: Commit test and coverage reports to repository
      if: always()
      run: |
        cd target-repo
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any changes to commit
        if [ -d "tests/test_reports" ] || [ -d "tests/coverage_reports" ]; then
          echo "Found report directories, preparing to commit..."
          
          # Force add all files in the report directories (including any that might be ignored)
          git add -A tests/test_reports/ tests/coverage_reports/ 2>/dev/null || true
          
          # Check if there are any changes at all (staged or unstaged)
          if git diff HEAD --quiet && git diff --staged --quiet; then
            echo "No changes detected in report directories"
          else
            echo "Changes detected, committing reports..."
            # Count files before committing
            TEST_FILES=$(find tests/test_reports -name "*.txt" 2>/dev/null | wc -l)
            COVERAGE_FILES=$(find tests/coverage_reports -name "*.html" 2>/dev/null | wc -l)
            
            # Commit the reports
            git commit -m "🤖 AI Test Results: Add latest test and coverage reports
            
            - Test reports: ${TEST_FILES} files
            - Coverage reports: ${COVERAGE_FILES} files
            
            Generated by AI Test Runner on $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || echo "Commit failed or no changes to commit"
            
            # Push the commit back to the repository
            git push origin HEAD:${{ github.ref_name }} || echo "Failed to push reports (this may be normal for PRs)"
          fi
        else
          echo "No report directories found to commit"
        fi

    - name: Comment test results on issue
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const testExitCode = ${{ steps.test-execution.outcome == 'success' }};
          const testSummary = `${{ steps.test-summary.outputs.summary }}`;
          const coverageAvailable = `${{ steps.test-summary.outputs.coverage_available }}`;

          let body;
          if (testExitCode) {
            body = `✅ **AI Test Execution Completed Successfully!**\n\n## Test Results\n\`\`\`\n${testSummary}\n\`\`\`\n\nAll tests passed! 🎉`;
          } else {
            body = `❌ **AI Test Execution Completed with Failures**\n\n## Test Results\n\`\`\`\n${testSummary}\n\`\`\`\n\nSome tests failed. Please check the detailed test reports in the \`tests/test_reports/\` directory.`;
          }
          
          if (coverageAvailable === 'true') {
            body += `\n\n## Coverage Report\n📊 Coverage reports are available:\n- **GitHub Pages**: https://${context.repo.owner}.github.io/${context.repo.repo}/\n- **Download Artifact**: Download the "coverage-reports" artifact to view detailed code coverage information.`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: target-repo/tests/test_reports/
        retention-days: 30

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: target-repo/tests/coverage_reports/
        retention-days: 30

  # Deploy coverage reports to GitHub Pages
  deploy-coverage:
    if: always()
    needs: run-tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download coverage artifact
      id: download-coverage
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage-reports/

    - name: Check if coverage reports exist
      id: check-coverage
      run: |
        # Check if the coverage artifact was downloaded successfully
        if [ -f "coverage-reports/index.html" ]; then
          echo "coverage_exists=true" >> $GITHUB_OUTPUT
          echo "Coverage reports found and downloaded successfully"
        else
          echo "coverage_exists=false" >> $GITHUB_OUTPUT
          echo "Coverage reports not found in artifact"
          ls -la coverage-reports/ 2>/dev/null || echo "coverage-reports directory does not exist"
        fi

    - name: Deploy to GitHub Pages
      if: steps.check-coverage.outputs.coverage_exists == 'true'
      id: deployment
      uses: actions/deploy-pages@v4